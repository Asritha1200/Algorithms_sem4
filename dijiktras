//SINGLE SOURCE SHORETEST PATH
//FINDS THE SHORTEST PATH FROM THE SORCE VERTEX TO EVERY OTHER VERTEX OF THR GRAPH
//Enter 0 as the source vertex
package first;
import java.util.Scanner;

public class dijiktra {
	
	int min_distance(int dist[],Boolean visited[])
	{
		int n=dist.length;
		int min_index=-1;
		int min_distance=Integer.MAX_VALUE;
		for(int v=0;v<n;v++)
		{
			if(visited[v]==false && dist[v]<=min_distance)
			{
				min_distance=dist[v];
				min_index=v;
				
			}
			
		}
		return min_index; 
	}
	void display(int dist[])
	{
		int n=dist.length;
		for(int v=0;v<n;v++)
		{
			System.out.println(v+"\t\t"+dist[v]);
		}
	}
	void dij(int graph[][],int src)
	{
		 int n=graph.length;

		int dist[]=new int[n];
		Boolean visited[]=new Boolean[n];
		for(int i=0;i<n;i++)
		{
			dist[i]=Integer.MAX_VALUE;
			visited[i]=false;
			
		}
		dist[src]=0;
		for(int count=0;count<n-1;count++)
		{
			int u=min_distance(dist,visited);
			visited[u]=true;
		for(int v=0;v<n;v++)
		{
			if(!visited[v]&&graph[u][v]!=0&&dist[u]+graph[u][v]<Integer.MAX_VALUE)
			{
				dist[v]=dist[u]+graph[u][v];
				
			}
		}
		
			
		}
		display(dist);
		
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner (System.in);
				int n;
				System.out.println("enter the number of vertices");
				n=sc.nextInt();

				System.out.println("enter the adjacency matricx values");
				int graph[][]=new int[n][n];
				for(int i=0;i<n;i++)
				{
					for(int j=0;j<n;j++)
					{
						graph[i][j]=sc.nextInt();
					}
				}
				System.out.println("enter the source element");
				int src=sc.nextInt();
				dijiktra ob=new dijiktra();
				ob.dij(graph,src);

	}

}
