package first;

import java.util.*;
import java.lang.*;
 class btd{
	public static void longestsubsequence(String s1,String s2)
	{
		int n=s1.length();
		int m=s2.length();
		int arr[][]=new int [n+1][m+1];
		for(int i=0;i<=n;i++)
		{
			arr[i][0]=0;
			
		}
		for(int j=0;j<=m;j++)
		{
			arr[0][j]=0;
			
		}
		for(int i=1;i<=n;i++)
		{
			
		for(int j=1;j<=m;j++)
		{
		if(s1.charAt(n-1)==s2.charAt(m-1))
		{
			arr[i][j]=1+arr[i-1][j-1];
		}
		else
		{
			arr[i][j]=Math.max(arr[n][m-1],arr[n-1][m]);
		}
		}
		}
	int index=arr[n][m];

	int temp=index;
	char maxstr[]=new char[index+1];
	maxstr[index]='\u0000';
	int i=n;
	int j=m;
	while(i>0||j>0)
	{
		if(s1.charAt(i-1)==s2.charAt(j-1))
		{
			maxstr[index-1]=s1.charAt(i-1);
			i--;
			j--;
			index--;
			
		}
		else if(arr[i][j-1]>arr[i-1][j])
		{
			j--;
		}
		else
		{
			i--;
		}
	}
	for(int k=0;k<temp;k++)
	{
		System.out.print(maxstr[k]);
	}
	return;
	
	}
}
public class bottomtopdp {

	public static void main(String[] args) {
		String s1="abde";
		String s2="abe";
		btd.longestsubsequence(s1,s2);
		
		

	}

}
